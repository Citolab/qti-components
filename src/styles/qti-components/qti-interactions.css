@layer qti-components {
  qti-choice-interaction {
    &.qti-input-control-hidden {
      & qti-simple-choice {
        position: relative; /* Add position relative here instead of a separate rule */

        @apply button;

        &:hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }

        &::part(ch) {
          display: none;
        }

        &:state(--checked),
        &[aria-checked='true'] {
          @apply act;
        }

        &:state(readonly),
        &[aria-readonly='true'] {
          @apply rdo;
        }

        &:state(disabled),
        &[aria-disabled='true'] {
          @apply dis;
        }

        /* Add styling for correct responses with border instead of checkmark */
        &:state(correct-response),
        &[data-correct-response='true'] {
          border: 3px solid var(--qti-correct) !important;
          padding-right: 30px;

          &::after {
            content: '\02714';
            color: var(--qti-correct);
            position: absolute;
            top: 5px;
            right: 5px;
            font-size: 1.2em;
            font-weight: bold;
          }
        }
      }
    }

    &:not(.qti-input-control-hidden) {
      & qti-simple-choice {
        @apply check;

        &:not([aria-disabled='true'], [aria-readonly='true'], :state(--checked)):hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }

        &:state(--checked),
        &[aria-checked='true'] {
          @apply act;
        }

        &:state(candidate-correct) {
          background-color: var(--qti-correct);
        }

        &:state(candidate-incorrect) {
          background-color: var(--qti-incorrect);
        }

        &:state(readonly),
        &[aria-readonly='true'] {
          @apply rdo;
        }

        &:state(disabled),
        &[aria-disabled='true'] {
          @apply dis;
        }

        &::part(cha) {
          @apply check-size;
        }

        &:state(radio)::part(ch) {
          @apply check-radio;
        }

        &:state(radio):state(--checked)::part(cha) {
          @apply check-radio-checked;
        }

        &:state(checkbox)::part(ch) {
          @apply check-checkbox;
        }

        &:state(checkbox):state(--checked)::part(cha) {
          @apply check-checkbox-checked;
        }
      }
    }

    /* stylelint-disable-next-line no-descending-specificity */
    & qti-simple-choice {
      width: fit-content;
      cursor: pointer;

      /* Keep the checkmark for non-hidden input controls */
      &:state(correct-response),
      &[data-correct-response='true'] {
        /* stylelint-disable-next-line no-descending-specificity */
        &::after {
          content: '\02714';
          color: var(--qti-correct);
        }
      }
    }

    & qti-simple-choice > p {
      margin: 0 !important;
      padding: 0 !important;
    }
  }

  .hover-border {
    border: 2px solid #000; /* Adjust the border style and color as needed */
  }

  qti-graphic-gap-match-interaction {
    position: relative;

    &.qti-selections-light {
      &:state(--dragzone-active)::part(drags) {
        background-color: var(--qti-light-bg-active);
        border-color: var(--qti-light-border-active);
      }

      &:state(--dragzone-enabled)::part(drags) {
        background-color: var(--qti-light-bg-active);
      }
    }

    &.qti-selections-dark {
      &:state(--dragzone-active)::part(drags) {
        background-color: var(--qti-dark-bg-active);
        border-color: var(--qti-dark-border-active);
      }

      &:state(--dragzone-enabled)::part(drags) {
        background-color: var(--qti-dark-bg-active);
      }
    }

    /* General styles for active and enabled states */
    &:state(--dragzone-active)::part(drags) {
      @apply act;
    }

    &:state(--dragzone-enabled)::part(drags) {
      @apply dropping;
    }

    & qti-gap-img,
    qti-gap-text {
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: grab;
    }

    & qti-associable-hotspot {
      display: flex;
      justify-content: center;
      align-items: center;
      border: 2px solid transparent;

      &[enabled] {
        @apply dropping;

        /* Light theme override */
        .qti-selections-light {
          background-color: var(--qti-light-bg-active);
        }

        /* Dark theme override */
        .qti-selections-dark {
          background-color: var(--qti-dark-bg-active);
        }
      }

      &[active] {
        @apply act;

        /* Light theme override */
        .qti-selections-light {
          background-color: var(--qti-light-bg-active);
          border-color: var(--qti-light-border-active);
        }

        /* Dark theme override */
        .qti-selections-dark {
          background-color: var(--qti-dark-bg-active);
          border-color: var(--qti-dark-border-active);
        }
      }

      &[disabled] {
        @apply dis;

        &:not(:empty) {
          cursor: default !important;
        }
      }

      &:empty::after {
        padding: var(--qti-padding-md) var(--qti-padding-lg); /* Padding shorthand */
        content: '\0000a0'; /* when empty, put a space in it */
      }

      &:not(:empty) {
        padding: 0;
        width: auto;
      }

      &:not(:empty) > * {
        flex: 1;
        transform: rotate(0); /* rotate-0 */
        box-shadow: 0 0 0 1px #e5e7eb; /* ring-gray-200 */
      }
    }

    & img {
      margin: 0;
      padding: 0;
    }
  }

  qti-text-entry-interaction {
    &:state(candidate-correct) {
      &::part(input) {
        background-color: var(--qti-correct);
      }
    }

    &:state(candidate-partially-correct) {
      &::part(input) {
        background-color: var(--qti-partially-correct);
      }
    }

    &:state(candidate-incorrect) {
      &::part(input) {
        background-color: var(--qti-incorrect);
      }
    }

    &::part(input) {
      @apply text;
    }

    &:hover {
      @apply hov;
    }

    &:focus-within {
      &::part(input) {
        @apply foc act-bor;
      }
    }
  }

  qti-extended-text-interaction {
    &::part(textarea) {
      @apply text;
    }

    &:hover {
      @apply hov;
    }

    &:focus-within {
      &::part(textarea) {
        @apply foc act-bor;
      }
    }
  }

  qti-gap-match-interaction {
    &.qti-selections-light {
      &:state(--dragzone-active)::part(drags) {
        background-color: var(--qti-light-bg-active);
        border-color: var(--qti-light-border-active);
      }

      &:state(--dragzone-enabled)::part(drags) {
        background-color: var(--qti-light-bg-active);
      }
    }

    &.qti-selections-dark {
      &:state(--dragzone-active)::part(drags) {
        background-color: var(--qti-dark-bg-active);
        border-color: var(--qti-dark-border-active);
      }

      &:state(--dragzone-enabled)::part(drags) {
        background-color: var(--qti-dark-bg-active);
      }
    }

    /* General styles for active and enabled states */
    &:state(--dragzone-active)::part(drags) {
      @apply act;
    }

    &:state(--dragzone-enabled)::part(drags) {
      @apply dropping;
    }

    & qti-gap-text {
      @apply drag;

      &[dragging] {
        @apply dragging;
      }

      &:hover {
        @apply hov;
      }

      &:focus {
        @apply foc;
      }
    }

    & qti-gap {
      @apply drop;

      &[disabled] {
        @apply dis;

        &:not(:empty) {
          cursor: default !important;
        }
      }

      &[enabled] {
        @apply dropping;

        /* Light theme override */
        .qti-selections-light {
          border-color: var(--qti-light-border-active);
        }

        /* Dark theme override */
        .qti-selections-dark {
          border-color: var(--qti-dark-border-active);
        }
      }

      &[active] {
        @apply act;

        /* Light theme override */
        .qti-selections-light {
          background-color: var(--qti-light-bg-active);
          border-color: var(--qti-light-border-active);
        }

        /* Dark theme override */
        .qti-selections-dark {
          background-color: var(--qti-dark-bg-active);
          border-color: var(--qti-dark-border-active);
        }
      }

      display: inline-flex;
      align-items: center;

      &:empty::after {
        padding: var(--qti-padding-md) var(--qti-padding-lg); /* Padding shorthand */
        content: '\0000a0'; /* when empty, put a space in it */
      }

      &:not(:empty) {
        display: inline-flex;
        padding: 0;
        width: auto;
      }

      &:not(:empty) > * {
        flex: 1;
        transform: rotate(0); /* rotate-0 */
        box-shadow: 0 0 0 1px #e5e7eb; /* ring-gray-200 */
      }
    }
  }

  qti-hotspot-interaction {
    & qti-hotspot-choice {
      &[shape='circle'] {
        @apply spot;

        &:hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }

        &:state(--checked),
        &[aria-checked='true'] {
          @apply act-bor;
        }

        &:state(--readonly),
        &[aria-readonly='true'] {
          @apply rdo;
        }

        &:state(--disabled),
        &[aria-disabled='true'] {
          @apply dis;
        }
      }

      &[shape='rect'] {
        @apply spot;

        /* &:hover {
          @apply hov;
        } */

        &:focus {
          @apply foc;
        }

        &:state(--checked),
        &[aria-checked='true'] {
          @apply act-bor;
        }

        &[aria-readonly='true'] {
          @apply rdo;
        }

        &[aria-disabled='true'] {
          @apply dis;
        }
      }

      &[shape='poly'] {
        &:hover::after {
          content: '';
          width: 100%;
          height: 100%;
          background: repeating-linear-gradient(
            45deg,
            var(--qti-border-active),
            var(--qti-border-active) 5px,
            transparent 5px,
            transparent 10px
          );
          display: block;
        }

        &:state(--checked)::after,
        &[aria-checked='true']::after {
          content: '';
          width: 100%;
          height: 100%;
          background: repeating-linear-gradient(
            45deg,
            transparent,
            transparent 5px,
            var(--qti-border-active) 5px,
            var(--qti-border-active) 10px
          );
          display: block;
        }

        &[aria-readonly='true'] {
          @apply rdo;
        }

        &[aria-disabled='true'] {
          @apply dis;
        }
      }
    }
  }

  qti-hottext-interaction {
    /* &:not(.qti-input-control-hidden),
    &:not(.qti-unselected-hidden) { */
    qti-hottext {
      display: inline-flex;
      align-items: center;

      @apply check;

      &:hover {
        @apply hov;
      }

      &:focus {
        @apply foc;
      }

      &::part(cha) {
        @apply check-size;
      }

      &:state(radio)::part(ch) {
        @apply check-radio;
      }

      &:state(radio):state(--checked)::part(cha) {
        @apply check-radio-checked;
      }

      &:state(checkbox)::part(ch) {
        @apply check-checkbox;
      }

      &:state(checkbox):state(--checked)::part(cha) {
        @apply check-checkbox-checked;
      }

      &:state(correct-response),
      &[data-correct-response='true'] {
        &::after {
          content: '\02714';
          color: #16a34a; /* text-green-600 */
        }
      }
    }

    &.qti-input-control-hidden {
      qti-hottext {
        /* --qti-padding-md: 0.1rem;
        --qti-padding-lg: 0.2rem;
        --qti-border-radius-md: 0.3rem;
        --qti-border-thickness: 1px;
        --qti-font-weight-semibold: 400; */
        @apply button;

        &:hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }

        /* @layer qti-variants { */
        &::part(ch) {
          display: none;
        }

        &:state(--checked) {
          @apply act;
        }

        &[aria-readonly='true'] {
          @apply rdo;
        }

        &[aria-disabled='true'] {
          @apply dis;
        }
      }

      /* } */
    }

    &.qti-unselected-hidden {
      qti-hottext {
        &:hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }

        cursor: pointer;

        &::part(ch) {
          display: none;
        }

        &:state(--checked) {
          background-color: var(--qti-bg-active);
        }

        &[aria-readonly='true'] {
          @apply rdo;
        }

        &[aria-disabled='true'] {
          @apply dis;
        }
      }
    }
  }

  qti-inline-choice-interaction {
    &:state(candidate-correct) {
      background-color: var(--qti-correct);
    }

    &:state(candidate-incorrect) {
      background-color: var(--qti-incorrect);
    }

    &::part(select) {
      @apply select;

      &:hover {
        @apply hov;
      }

      &:focus {
        @apply foc;
      }
    }
  }

  qti-match-interaction.qti-match-tabular {
    /* Table element */
    &::part(table) {
      border-collapse: collapse;
      width: 100%;
      table-layout: fixed;
    }

    /* Row headers */
    &::part(r-header) {
      background-color: var(--qti-bg-active, #f8f8f8);
      font-weight: 500;
      text-align: center;
      padding: 8px;
      border: 1px solid #ddd;
    }

    /* Column headers */
    &::part(c-header) {
      background-color: var(--qti-bg-active, #f8f8f8);
      font-weight: 500;
      text-align: left;
      padding: 8px 15px;
      border: 1px solid #ddd;
    }

    /* Table rows */
    &::part(row) {
      border-bottom: 1px solid #ddd;
    }

    /* Input cells */
    &::part(input-cell) {
      text-align: center;
      vertical-align: middle;
      height: 48px;
      border: 1px solid #ddd;
      padding: 8px;
    }

    /* Radio button styling */
    &::part(rb) {
      appearance: none;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      border: 2px solid var(--qti-border-active, #2196f3);
      background-color: transparent !important;
      margin: 0 auto;
      cursor: pointer;
      display: block;
    }

    /* Radio button checked state */
    &::part(rb-checked) {
      box-shadow: inset 0 0 0 6px var(--qti-border-active, #2196f3);
    }

    /* Checkbox styling */
    &::part(cb) {
      appearance: none;
      width: 24px;
      height: 24px;
      border-radius: 3px;
      border: 2px solid var(--qti-border-active, #2196f3);
      background-color: transparent !important;
      margin: 0 auto;
      cursor: pointer;
      display: block;
    }

    /* Checkbox checked state - only change border if we're adding an SVG checkmark */
    &::part(cb-checked) {
      background-color: var(--qti-border-active, #2196f3) !important;
    }

    &::part(checkmark) {
      position: absolute;
      width: 18px;
      height: 18px;
      top: 3px;
      left: 3px;
      pointer-events: none;
    }

    /* Correct answers for both types */
    &::part(rb-correct) {
      border-color: var(--qti-correct, #4caf50);
    }

    &::part(rb-checked rb-correct) {
      box-shadow: inset 0 0 0 6px var(--qti-correct, #4caf50);
    }

    &::part(cb-correct) {
      border-color: var(--qti-correct, #4caf50);
    }

    &::part(cb-checked cb-correct) {
      background-color: var(--qti-correct, #4caf50) !important;
    }

    /* Incorrect answers for both types */
    &::part(rb-incorrect) {
      border-color: var(--qti-incorrect, #f44336);
    }

    &::part(rb-checked rb-incorrect) {
      box-shadow: inset 0 0 0 6px var(--qti-incorrect, #f44336);
    }

    &::part(cb-incorrect) {
      border-color: var(--qti-incorrect, #f44336);
    }

    &::part(cb-checked cb-incorrect) {
      background-color: var(--qti-incorrect, #f44336) !important;
    }
  }

  qti-match-interaction:not(.qti-match-tabular) {
    &:state(--dragzone-enabled) qti-simple-match-set:first-of-type {
      @apply dropping;
    }

    &:state(--dragzone-active) qti-simple-match-set:first-of-type {
      @apply act;
    }

    /* The draggables */
    & qti-simple-match-set:first-of-type {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start; /* Prevents children from stretching */
      gap: var(--qti-gap-size);
      border: 2px solid transparent;

      & qti-simple-associable-choice {
        @apply drag;

        &[dragging] {
          @apply dragging;
        }

        &:hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }
      }
    }

    /* The droppables */
    & qti-simple-match-set:last-of-type {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      grid-auto-flow: unset;
      grid-auto-columns: unset;
      gap: var(--qti-gap-size);

      & > qti-simple-associable-choice {
        /* a droppable qti-simple-associable-choice */
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        grid-row: unset;
        box-sizing: border-box;

        & img {
          max-width: 100%;
          height: auto;
        }

        &[enabled] {
          &::part(dropslot) {
            @apply dropping;
          }
        }

        &[disabled] {
          &::part(dropslot) {
            @apply dis;
          }
        }

        &[active] {
          &::part(dropslot) {
            @apply act;
          }
        }

        &::part(dropslot) {
          @apply drop;

          &[dragging] {
            @apply dragging;
          }

          &:focus {
            @apply foc;
          }

          padding: var(--qti-dropzone-padding);
          margin-top: 0.5rem;
          gap: 0.5rem;
          display: flex;
          flex-wrap: wrap;
          justify-content: center;
          align-items: center;
        }

        & > *:not(qti-simple-associable-choice) {
          pointer-events: none;
        }

        & > qti-simple-associable-choice {
          @apply drag;

          &:state(candidate-correct) {
            background-color: var(--qti-correct);
          }

          &:state(candidate-incorrect) {
            background-color: var(--qti-incorrect);
          }

          &::part(dropslot) {
            display: none;
          }

          &:hover {
            @apply hov;
          }

          &:focus {
            @apply foc;
          }

          flex-basis: fit-content;
        }
      }
    }
  }

  qti-order-interaction:state(--dragzone-active)::part(drags) {
    @apply act;
  }

  qti-order-interaction:state(--dragzone-enabled)::part(drags) {
    @apply dropping;
  }

  qti-order-interaction {
    &::part(qti-simple-choice),
    & qti-simple-choice {
      @apply drag;

      &[dragging] {
        @apply dragging;
      }

      &:hover {
        @apply hov;
      }

      &:focus {
        @apply foc;
      }
    }

    &::part(qti-simple-choice) {
      display: flex;
      overflow: hidden;
      align-items: center;
      width: 100%;
      text-overflow: ellipsis;
    }

    &::part(drops) {
      gap: 0.5rem; /* gap-2 */
    }

    &::part(drags) {
      gap: 0.5rem; /* gap-2 */
    }

    &::part(drop-list) {
      @apply drop;

      &[enabled] {
        @apply dropping;

        /* Light theme override */
        .qti-selections-light {
          border-color: var(--qti-light-border-active);
        }

        /* Dark theme override */
        .qti-selections-dark {
          border-color: var(--qti-dark-border-active);
        }
      }

      &:hover {
        @apply hov;
      }

      &:focus {
        @apply foc;
      }

      display: flex;
      min-height: 4rem;
    }

    &::part(active) {
      @apply act;
    }

    & drop-list {
      &[shape='circle'] {
        @apply spot;

        &:hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }

        &[aria-checked='true'] {
          @apply act;
        }

        &[aria-readonly='true'] {
          @apply rdo;
        }

        &[aria-disabled='true'] {
          @apply dis;
        }
      }

      &[shape='square'] {
        @apply spot;

        &:hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }

        &[aria-checked='true'] {
          @apply act;
        }

        &[aria-readonly='true'] {
          @apply rdo;
        }

        &[aria-disabled='true'] {
          @apply dis;
        }
      }
    }
  }

  qti-associate-interaction {
    /* General styles for active and enabled states */
    &:state(--dragzone-active) slot[name='qti-simple-associable-choice'] {
      @apply act;
    }

    &:state(--dragzone-enabled) slot[name='qti-simple-associable-choice'] {
      @apply dropping;
    }

    & qti-simple-associable-choice, /* drags when in lightdom */
    &::part(qti-simple-associable-choice) /* drags when in shadowdom */ {
      @apply drag;

      &:hover {
        @apply hov;
      }

      &:focus {
        @apply foc;
      }

      &[dragging] {
        @apply dragging;
      }
    }

    /* display: flex;
    overflow: hidden;
    align-items: center; */

    /* &::part(drop-container) {
      display: flex;
      flex-direction: column;
      gap: var(--qti-gap-size);
    } */

    &::part(drop-list) {
      @apply drop;

      display: grid;
      height: 3rem;
      min-width: 10rem;
    }

    &::part(drop-list):focus {
      @apply foc;
    }

    &::part(drop-list)[dragging] {
      @apply act;
    }

    /* &::part(drop-list) {
      @apply act;
    } */
  }

  qti-graphic-order-interaction {
    & qti-hotspot-choice {
      width: 100%;
      height: 100%;
      background-color: rgb(128 128 128 / 30%);
      padding: 0;

      &:hover {
        background-color: rgb(128 128 128 / 70%);
      }

      &:focus {
        background-color: rgb(128 128 128 / 70%);
      }

      &:state(--checked),
      &[aria-checked='true'] {
        background-color: rgb(128 128 128 / 70%);
      }

      &[aria-readonly='true'] {
        @apply rdo;
      }

      &[aria-disabled='true'] {
        @apply dis;
      }

      &[aria-ordervalue] {
        display: grid;
        place-content: center;
      }

      &[aria-ordervalue]::after {
        content: attr(aria-ordervalue) !important;
      }

      &[aria-ordercorrectvalue] {
        display: grid;
        place-content: center;
      }

      /* When both attributes are present */
      &[aria-ordercorrectvalue][aria-ordervalue]::after {
        content: 'C=' attr(aria-ordercorrectvalue) '  R=' attr(aria-ordervalue) !important;
        color: var(--qti-correct);
      }

      /* When only aria-ordercorrectvalue is present */
      &[aria-ordercorrectvalue]:not([aria-ordervalue])::after {
        content: 'C=' attr(aria-ordercorrectvalue) !important;
        color: var(--qti-correct);
      }
    }

    &.qti-selections-light {
      &:state(--dragzone-active)::part(drags) {
        background-color: var(--qti-light-bg-active);
        border-color: var(--qti-light-border-active);
      }

      &:state(--dragzone-enabled)::part(drags) {
        background-color: var(--qti-light-bg-active);
      }
    }

    &.qti-selections-dark {
      &:state(--dragzone-active)::part(drags) {
        background-color: var(--qti-dark-bg-active);
        border-color: var(--qti-dark-border-active);
      }

      &:state(--dragzone-enabled)::part(drags) {
        background-color: var(--qti-dark-bg-active);
      }
    }

    /* General styles for active and enabled states */
    &:state(--dragzone-active)::part(drags) {
      @apply act;
    }

    &:state(--dragzone-enabled)::part(drags) {
      @apply dropping;
    }
  }

  qti-graphic-associate-interaction {
    position: relative;
    display: block;

    & qti-associable-hotspot {
      &[shape='circle'] {
        @apply spot;

        &:hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }

        &[aria-checked='true'] {
          @apply act;
        }

        &[aria-readonly='true'] {
          @apply rdo;
        }

        &[aria-disabled='true'] {
          @apply dis;
        }
      }

      &[shape='square'] {
        @apply spot;

        &:hover {
          @apply hov;
        }

        &:focus {
          @apply foc;
        }

        &[aria-checked='true'] {
          @apply act;
        }

        &[aria-readonly='true'] {
          @apply rdo;
        }

        &[aria-disabled='true'] {
          @apply dis;
        }
      }
    }

    &.qti-selections-light {
      &:state(--dragzone-active)::part(drags) {
        background-color: var(--qti-light-bg-active);
        border-color: var(--qti-light-border-active);
      }

      &:state(--dragzone-enabled)::part(drags) {
        background-color: var(--qti-light-bg-active);
      }
    }

    &.qti-selections-dark {
      &:state(--dragzone-active)::part(drags) {
        background-color: var(--qti-dark-bg-active);
        border-color: var(--qti-dark-border-active);
      }

      &:state(--dragzone-enabled)::part(drags) {
        background-color: var(--qti-dark-bg-active);
      }
    }

    /* General styles for active and enabled states */
    &:state(--dragzone-active)::part(drags) {
      @apply act;
    }

    &:state(--dragzone-enabled)::part(drags) {
      @apply dropping;
    }
  }

  qti-slider-interaction {
    --qti-tick-color: rgb(229 231 235 / 100%);
    --qti-tick-width: 1px;
  }

  qti-select-point-interaction {
    &::part(point) {
      &:hover {
        @apply hov;
      }

      &:focus {
        @apply foc;
      }

      @apply point;
    }
  }

  qti-position-object-stage {
    & qti-position-object-interaction {
      /* no styles necessary, only layout styles, defined in the component */
    }
  }

  qti-prompt {
    margin: 0.5rem 0; /* my-2 */
    display: block;
    width: 100%;
  }
}
