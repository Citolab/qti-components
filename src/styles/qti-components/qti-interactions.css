@layer qti-components {
  qti-choice-interaction {
    &.qti-input-control-hidden {
      & qti-simple-choice {
        @apply button hover:hov focus:foc;
        &::part(ch) {
          @apply !hidden;
        }
        &[aria-checked='true'] {
          @apply act;
        }
        &[aria-readonly='true'] {
          @apply rdo;
        }
        &[aria-disabled='true'] {
          @apply dis;
        }
      }
    }

    &:not(.qti-input-control-hidden) {
      & qti-simple-choice {
        @apply check hover:hov focus:foc;
        &[aria-checked='true'] {
          @apply act;
        }
        &[aria-readonly='true'] {
          @apply rdo;
        }
        &[aria-disabled='true'] {
          @apply dis;
        }

        &::part(cha) {
          /* let the checkmark or radio circle already take up space, else when checking everyhing collapses */
          @apply h-2/3 w-2/3;
        }
        &[role='radio']::part(ch) {
          @apply check-radio;
        }
        &[role='radio'][aria-checked='true']::part(cha) {
          @apply check-radio-checked;
        }
        &[role='checkbox']::part(ch) {
          @apply check-checkbox;
        }
        &[role='checkbox'][aria-checked='true']::part(cha) {
          @apply check-checkbox-checked;
        }
      }
    }

    & qti-simple-choice {
      &[data-correct-response='true'] {
        &::after {
          content: '\02714';
          @apply text-green-600;
        }
      }
    }

    & qti-simple-choice > p {
      @apply m-0 p-0;
    }
  }

  qti-text-entry-interaction {
    &::part(input) {
      @apply text hover:hov focus:foc;
    }
  }

  qti-extended-text-interaction {
    &::part(textarea) {
      @apply text hover:hov focus:foc;
    }
  }

  qti-gap-match-interaction {
    & qti-gap-text {
      @apply drag hover:hov focus:foc;
    }
    & qti-gap {
      @apply drop hover:hov focus:foc p-lg inline-flex;
      @apply w-32; /* PK: should be set in the javascript, default 100px, or listening to data-width attribute according to the spec */
      &:empty:after {
        content: '\0000a0'; /* when empty, put a space in it */
      }
      &:not(:empty) {
        @apply inline-flex w-auto p-0;
      }
      &:not(:empty) > * {
        @apply flex-1 rotate-0 ring-gray-200;
      }
    }
  }

  qti-hotspot-interaction {
    & qti-hotspot-choice {
      &[shape='circle'] {
        @apply spot hover:hov-ring focus:foc rounded-full;
        &[aria-checked='true'] {
          @apply act;
        }
        &[aria-readonly='true'] {
          @apply rdo;
        }
        &[aria-disabled='true'] {
          @apply dis;
        }
      }
      &[shape='rect'] {
        @apply spot hover:hov-ring focus:foc;
        &[aria-checked='true'] {
          @apply act;
        }
        &[aria-readonly='true'] {
          @apply rdo;
        }
        &[aria-disabled='true'] {
          @apply dis;
        }
      }
      &[shape='poly'] {
        &:hover::after {
          @apply act;
          content: '';
          width: 100%;
          height: 100%;
          background: repeating-linear-gradient(
            45deg,
            var(--qti-primary-color),
            var(--qti-primary-color) 5px,
            transparent 5px,
            transparent 10px
          );
          display: block;
        }

        &[aria-checked='true']:after {
          @apply act;
          content: '';
          width: 100%;
          height: 100%;
          background: repeating-linear-gradient(
            45deg,
            transparent,
            transparent 5px,
            var(--qti-primary-color) 5px,
            var(--qti-primary-color) 10px
          );
          display: block;
        }

        /* @apply hover:hov focus:foc; */
        &[aria-checked='true'] {
          @apply act;
        }
        &[aria-readonly='true'] {
          @apply rdo;
        }
        &[aria-disabled='true'] {
          @apply dis;
        }
      }
    }
  }

  qti-hottext-interaction {
    &.qti-input-control-hidden {
      qti-hottext {
        @apply button hover:hov  focus:foc inline-flex;
        &::part(ch) {
          @apply !hidden;
        }
        &[aria-checked='true'] {
          @apply act;
        }
        &[aria-readonly='true'] {
          @apply rdo;
        }
        &[aria-disabled='true'] {
          @apply dis;
        }
      }
    }

    &:not(.qti-input-control-hidden),
    &:not(.qti-unselected-hidden) {
      qti-hottext {
        @apply check hover:hov focus:foc inline-flex;
        &::part(cha) {
          /* let the checkmark or radio circle already take up space, else when checking everyhing collapses */
          @apply h-2/3 w-2/3;
        }
        &[role='radio']::part(ch) {
          @apply check-radio;
        }
        &[role='radio'][aria-checked='true']::part(cha) {
          @apply check-radio-checked;
        }
        &[role='checkbox']::part(ch) {
          @apply check-checkbox;
        }
        &[role='checkbox'][aria-checked='true']::part(cha) {
          @apply check-checkbox-checked;
        }
      }
    }

    &.qti-unselected-hidden {
      qti-hottext {
        @apply bordered borderinvisible cursor-pointer hover:bordered  focus:foc inline-flex;
        &::part(ch) {
          @apply !hidden;
        }
        &[aria-checked='true'] {
          @apply bg-blue-200;
        }
        &[aria-readonly='true'] {
          @apply rdo;
        }
        &[aria-disabled='true'] {
          @apply dis;
        }
      }
    }
  }

  qti-inline-choice-interaction {
    &::part(select) {
      @apply select hover:hov focus:foc; /* aria-checked:act aria-readonly:rdo aria-disabled:dis; */
    }
  }

  qti-match-interaction:not(.qti-match-tabular) {
    & qti-simple-match-set:first-of-type {
      @apply flex flex-wrap gap-2 pb-4;

      & qti-simple-associable-choice {
        @apply drag hover:hov focus:foc;
      }
    }

    & qti-simple-match-set:last-of-type {
      @apply grid auto-cols-fr grid-flow-col gap-2 w-full;

      & qti-simple-associable-choice {
        @apply drop hover:hov focus:foc;
        @apply flex flex-col;
        min-height: 4rem;
      }

      & qti-simple-associable-choice[enabled] {
        @apply foc;
      }

      & qti-simple-associable-choice[active] {
        @apply act;
      }

      & qti-simple-associable-choice > *:not(qti-simple-associable-choice) {
        pointer-events: none;
      }

      & qti-simple-associable-choice > qti-simple-associable-choice {
        @apply drag hover:hov focus:foc;
        flex-basis: fit-content;
      }
    }
  }

  qti-order-interaction {
    &::part(qti-simple-choice),
    & qti-simple-choice {
      @apply drag hover:hov focus:foc;
    }
    &::part(qti-simple-choice) {
      @apply flex w-full items-center overflow-hidden text-ellipsis;
    }
    &::part(drops) {
      @apply gap-2;
    }
    &::part(drags) {
      @apply gap-2;
    }
    &::part(drop-list) {
      @apply drop hover:hov focus:foc flex min-h-[4rem];
    }
    &::part(active) {
      @apply act;
    }
  }

  qti-associate-interaction {
    &::part(qti-simple-associable-choice),
    & qti-simple-associable-choice {
      @apply drag hover:hov focus:foc flex items-center overflow-hidden text-ellipsis;
    }
    &::part(associables-container) {
      @apply my-2 flex w-full justify-between;
      background: linear-gradient(
        180deg,
        rgb(0 0 0 / 0%) calc(50% - 1px),
        #000000 calc(50%),
        rgb(0 0 0 / 0%) calc(50% + 1px)
      );
    }
    &::part(active) {
      @apply act;
    }
    &::part(drop-list) {
      @apply drop grid h-[3rem] w-1/3;
    }
  }

  qti-graphic-order-interaction {
    & qti-hotspot-choice {
      @apply spot hover:hov focus:foc;
      &[aria-checked='true'] {
        @apply act;
      }
      &[aria-readonly='true'] {
        @apply rdo;
      }
      &[aria-disabled='true'] {
        @apply dis;
      }
      &[aria-ordervalue] {
        @apply order flex items-center justify-center;
      }
      &[aria-ordervalue]::after {
        content: attr(aria-ordervalue) !important;
      }
    }
  }

  qti-graphic-associate-interaction {
    @apply relative block;

    & qti-associable-hotspot {
      &[shape='circle'] {
        /* border-radius: 100%;
        background-color: green; */
        @apply spot hover:hov focus:foc;
        &[aria-checked='true'] {
          @apply act;
        }
        &[aria-readonly='true'] {
          @apply rdo;
        }
        &[aria-disabled='true'] {
          @apply dis;
        }
      }

      &[shape='square'] {
        /* border-radius: 0; */
        /* background-color: green; */
        @apply spot hover:hov focus:foc;
        &[aria-checked='true'] {
          @apply act;
        }
        &[aria-readonly='true'] {
          @apply rdo;
        }
        &[aria-disabled='true'] {
          @apply dis;
        }
      }
    }
  }

  qti-graphic-gap-match-interaction {
    @apply relative;
    & img {
      @apply m-0 p-0;
    }
  }

  qti-slider-interaction {
    @apply block; /* else no screenshot will be made with html-to-image */

    --qti-tick-color: rgb(229 231 235 / 1);
    --qti-tick-width: 1px;

    &::part(slider) {
      @apply mx-8; /* so the slider stays INSIDE of the qti-slider-interaction */
      @apply pb-4 pt-5; /* this keeps all content in the qti-slider interaction, also for html-to-image */
    }

    --show-bounds: true;
    &::part(bounds) {
      @apply flex w-full justify-between; /* the two divs with value lower and upper will now be at start and end of this bounds container */
      @apply mb-2; /* just so it aligns with the value 'knob' */
    }

    --show-ticks: true;
    &::part(ticks) {
      @apply mx-0.5 mb-1 h-2; /* absolute height for the ticks, and keep distance of the rail. push them 0.5 inward */
      background-position: 0 center;
      background: linear-gradient(to right, var(--qti-tick-color) var(--qti-tick-width), transparent 1px) repeat-x;
      background-size: calc(calc(100% - var(--qti-tick-width)) / ((var(--max) - var(--min)) / var(--step))) 100%;
    }

    &::part(rail) {
      @apply flex items-center; /* so the knob is neatly centered vertically */
      /* DESIGN */
      @apply box-border; /* if you have a border in the design apply, this box-border will make the border stay INSIDE the rail */
      @apply h-1.5 w-full cursor-pointer rounded-full border border-solid border-gray-300 bg-gray-200;
    }

    &::part(knob) {
      @apply bg-primary relative h-4 w-4 origin-center -translate-x-1/2 cursor-pointer rounded-full;
      left: var(--value-percentage);
    }

    --show-value: true;
    &::part(value) {
      @apply absolute bottom-8; /* align the value, which you can drag, on top of the knob, so it aligns with the rest of the values */
      @apply left-2; /* should be half width of the knob if you want to center these two */
      @apply -translate-x-1/2 cursor-pointer rounded bg-gray-100 px-2 py-1 text-center text-gray-500;
    }
  }

  qti-select-point-interaction {
    &::part(point) {
      @apply hover:bg-blue-100 hover:bg-opacity-30;
      @apply point hover:hov-ring focus:foc rounded-full; /* aria-checked:act aria-readonly:rdo aria-disabled:dis ;*/
    }
  }

  qti-position-object-stage {
    & qti-position-object-interaction {
      /* no styles necessary, only layout styles, defined in the component */
      /* height: 40px; */
    }
  }

  qti-prompt {
    @apply my-2 block w-full;
  }
}
