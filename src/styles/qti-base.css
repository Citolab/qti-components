:root,
:host {
  /* Active colors */
  --qti-bg-active: #ffecec;
  --qti-border-active: #f86d70;

  /* Gap size */
  --qti-gap-size: 1rem;

  /* Background colors */
  --qti-bg: white;
  --qti-hover-bg: #f9fafb;

  /* Light theme colors */
  --qti-light-bg-active: #f0f0f0; /* Light gray */
  --qti-light-border-active: #d0d0d0; /* Medium gray */

  /* Dark theme colors */
  --qti-dark-bg-active: #1f2937; /* Dark gray */
  --qti-dark-border-active: #64748b; /* Medium gray */

  /* Disabled colors */
  --qti-disabled-bg: #f3f4f6;
  --qti-disabled-color: #45484f;

  /* Border properties */
  --qti-border-thickness: 2px;
  --qti-border-style: solid;
  --qti-border-color: #c6cad0;
  --qti-border-radius: 0.3rem;
  --qti-drop-border-radius: calc(var(--qti-border-radius) + var(--qti-border-thickness));

  /* Focus & active states */
  --qti-focus-border-width: 5px;
  --qti-focus-color: #bddcff7e;

  /* Class-specific variables */

  /* Form elements */
  --qti-form-size: 1rem;

  /* Point elements */
  --qti-point-size: 2rem;

  /* Order buttons */
  --qti-order-size: 2rem;

  /* Generic padding for all elements */
  --qti-padding-vertical: 0.5rem; /* py-2 */
  --qti-padding-horizontal: 0.5rem; /* px-2 */
}

/* SVG masks and backgrounds */
.chevron {
  background: url("data:image/svg+xml,%3Csvg fill='currentColor' width='22' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' aria-hidden='true'%3E%3Cpath clip-rule='evenodd' fill-rule='evenodd' d='M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z'%3E%3C/path%3E%3C/svg%3E")
    no-repeat center right 6px;
}

.handle {
  background-image: radial-gradient(
    circle at center,
    rgb(0 0 0 / 10%) 0,
    rgb(0 0 0 / 20%) 2px,
    rgb(255 255 255 / 0%) 2px,
    rgb(255 255 255 / 0%) 100%
  );
  background-repeat: repeat-y;
  background-position: left center;
  background-size: 14px 8px;
}

.check-mask {
  mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='currentColor' width='100%' height='100%' viewBox='0 0 24 24'%3E%3Cpath d='M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z'/%3E%3C/svg%3E");
}

/* 
  Following are classes that can be applied to elements and element states, so they are not used directly 
  The @apply directive is used to apply these classes to elements
*/

/* Apply .bordered to an element */
.bordered {
  border: var(--qti-border-thickness) var(--qti-border-style) var(--qti-border-color);
  outline: none;
}

/* Apply .form rules for checkbox and radiobutton */
.form {
  @apply bordered;

  display: grid;
  place-content: center;
  width: var(--qti-form-size);
  height: var(--qti-form-size);
}

/* Apply .button rules for button-like elements, such as drags and buttons */
.button {
  @apply bordered;

  border-radius: var(--qti-border-radius);
  padding: var(--qti-padding-vertical) var(--qti-padding-horizontal);
}

/* Apply .select for the select dropdown element */
.select {
  @apply bordered chevron;

  border-radius: var(--qti-border-radius);
  position: relative;
  appearance: none;
  padding: var(--qti-padding-vertical) var(--qti-padding-horizontal);
  padding-right: calc(var(--qti-padding-horizontal) + 1.5rem); /* 1.5rem for the chevron */
}

/* Apply .text for the input text and textarea */
.text {
  @apply bordered;

  border-radius: 0;
  cursor: text;
  padding: var(--qti-padding-vertical) var(--qti-padding-horizontal);
  background: unset;
}

/* Apply .spot for hotspot shapes */
.spot {
  @apply bordered;

  width: 100%;
  height: 100%;
  background-color: transparent;
  padding: 0;
}

/* Apply .point for circular small hotspots */
.point {
  @apply bordered;

  border-radius: 100%;
  width: var(--qti-point-size);
  height: var(--qti-point-size);
  background-color: transparent;
  padding: 0;
}

/* Apply .drag for draggable elements */
.drag {
  @apply bordered handle;

  transition:
    transform 200ms ease-out,
    box-shadow 200ms ease-out,
    rotate 200ms ease-out;
  cursor: grab;
  background-color: var(--qti-bg);
  padding: var(--qti-padding-vertical) var(--qti-padding-horizontal);
  border-radius: var(--qti-border-radius);
  padding-left: calc(var(--qti-padding-horizontal) + 0.5rem) !important; /* 1.5rem for the drag */
}

/* Apply .dragging for the dragging state of a draggable element */
.dragging {
  pointer-events: none;
  rotate: -2deg;
  box-shadow:
    0 8px 12px rgb(0 0 0 / 20%),
    0 4px 8px rgb(0 0 0 / 10%);
}

/* Apply .drop for an element where you can drop the draggable */
.drop {
  @apply bordered;

  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><circle cx="10" cy="10" r="7" stroke="%23CCCCCC" stroke-width="1" fill="transparent" /></svg>')
    center no-repeat;
  border-radius: var(--qti-border-radius);
  position: relative;
  background-color: var(--qti-bg);
}

/* Apply .dropping for an indicator where you can drop the draggable */
.dropping {
  background-color: var(--qti-bg-active);
}

/* Apply .order for a small circular button */
.order {
  @apply bordered;

  display: grid;
  place-content: center;

  /* background-color: var(--qti-bg-active); */
  border-radius: 100%;
  width: var(--qti-order-size);
  height: var(--qti-order-size);
}

/* Apply .check-size for radio and checkbox size */
.check-size {
  width: calc(var(--qti-form-size) - 6px);
  height: calc(var(--qti-form-size) - 6px);
}

/* Apply .check for checkbox */
.check {
  gap: 0.5rem;
  border-radius: var(--qti-border-radius);
  padding: var(--qti-padding-vertical) var(--qti-padding-horizontal);
  outline: none;
  cursor: pointer;
}

/* Apply .check-radio for outer circle of the radio buttons */
.check-radio {
  @apply form;

  border-radius: 100%;
}

/* Apply .check-radio-checked for the inner checked radio */
.check-radio-checked {
  background-color: var(--qti-border-active);
  border-radius: 100%;
}

/* Apply .check-checkbox for outer square of the checkbox */
.check-checkbox {
  @apply form;

  display: flex;
  place-items: center;
  border-radius: var(--qti-border-radius);
}

/* Apply .check-checkbox-checked for the inner checkmark */
.check-checkbox-checked {
  background-color: var(--qti-border-active);
  mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='currentColor' width='100%' height='100%' viewBox='0 0 24 24'%3E%3Cpath d='M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z'/%3E%3C/svg%3E");
}

/* Apply .hov for hover state */
.hov {
  background-color: var(--qti-hover-bg);
}

/* Apply .foc for focus state */
.foc {
  box-shadow: 0 0 0 var(--qti-focus-border-width) var(--qti-focus-color);
}

/* Apply .act for active state */
.act {
  border-color: var(--qti-border-active);
  background-color: var(--qti-bg-active);
}

.act-bg {
  background-color: var(--qti-bg-active);
}

.act-bor {
  border-color: var(--qti-border-active);
}

/* Apply .rdo for readonly state */
.rdo {
  cursor: pointer;
  background-color: var(--qti-bg);
  outline: 0;
  border: none;
}

/* Apply .dis for disabled state */
.dis {
  cursor: not-allowed;
  background-color: var(--qti-disabled-bg);
  color: var(--qti-disabled-color);
  border-color: var(--qti-border-color);
  outline: 4px solid var(--qti-disabled-bg);
}
